name: Golang CI/CD Pipeline

on:
  repository_dispatch:
    types: [ trigger-swe-grpc-gateway ]
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

env:
  IMAGE_NAME: 01092002/swe-gateway-service
  GO_VERSION: '1.21' # Specify Go version for consistency

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      id-token: write # For secure Docker Hub login

    outputs:
      START_TIME: ${{ steps.build_start_time.outputs.start_time }}
      IMAGE_TAG: ${{ steps.build_image.outputs.image_tag }}
      COMMIT_SHA: ${{ steps.build_image.outputs.commit_sha }}

    steps:
      - name: Record Build Start Time
        id: build_start_time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4 # Use latest version for performance
        with:
          fetch-depth: 1 # Shallow clone for faster checkout

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true # Cache Go modules and build cache

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Update Dependencies and Swagger
        run: |
          echo "ðŸ”„ Updating dependencies and swagger..."
          chmod +x ./scripts/build.sh ./scripts/update_swagger.sh
          ./scripts/build.sh
          ./scripts/update_swagger.sh
        shell: bash

      - name: Commit and Push Changes
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'repository_dispatch' && github.event.action == 'trigger-swe-grpc-gateway'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status -s)" ]; then
            git add .
            git commit -m "chore: update dependencies and swagger"
            git push origin main
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Branch Name
        id: extract_branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        id: build_image
        run: |
          set -e
          echo "ðŸš€ Building and pushing Docker image..."

          TIMESTAMP=$(TZ=Asia/Ho_Chi_Minh date +"%Y%m%d%H%M%S")
          BRANCH_NAME=${{ steps.extract_branch.outputs.branch }}
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="$BRANCH_NAME-$COMMIT_SHA-$TIMESTAMP"

          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --tag ${{ env.IMAGE_NAME }}:$IMAGE_TAG \
            --push \
            .
        env:
          DOCKER_BUILDKIT: 1 # Enable BuildKit for faster builds

      - name: Verify Docker Push
        run: |
          echo "âœ… Docker image pushed: ${{ env.IMAGE_NAME }}:${{ steps.build_image.outputs.image_tag }}"

  modify-k8s:
    name: Update Kubernetes Deployment
    needs: build-and-push
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      DURATION: ${{ steps.build_duration.outputs.duration }}

    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4
        with:
          repository: ngdangkietswe/swe-infrastructure
          token: ${{ secrets.PAT }}
          fetch-depth: 1

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update Kubernetes Deployment
        id: modify_image_tag
        run: |
          set -e
          echo "ðŸ”§ Updating Kubernetes deployment..."

          IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}
          yq eval ".spec.template.spec.containers[0].image = \"${{ env.IMAGE_NAME }}:$IMAGE_TAG\"" -i k8s/swe-gateway-service/deployment.yml

          echo "âœ… Kubernetes deployment updated with image: ${{ env.IMAGE_NAME }}:$IMAGE_TAG"

      - name: Commit and Push Kubernetes Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/swe-gateway-service/deployment.yml
          git commit -m "chore(swe-gateway-service): update image tag to ${{ needs.build-and-push.outputs.IMAGE_TAG }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Calculate Build Duration
        id: build_duration
        run: |
          START_TIME=${{ needs.build-and-push.outputs.START_TIME }}
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "âœ… Build took $DURATION seconds."

  notify-slack:
    name: Send Slack Notification
    needs: [ build-and-push, modify-k8s ]
    runs-on: ubuntu-latest
    if: always() # Run even on failure

    env:
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Push Notification to Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*:white_check_mark: Succeeded GitHub Actions*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repo*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*\n<${{ github.event.head_commit.url }}|${{ needs.build-and-push.outputs.COMMIT_SHA }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*\n${{ github.event.head_commit.author.name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*\n`${{ github.job }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Event Name*\n`${{ github.event_name }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow*\n`${{ github.workflow }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build Logs*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Took*\n`${{ needs.modify-k8s.outputs.DURATION }} sec`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Message*\n${{ github.event.head_commit.message }}"
                    }
                  ]
                }
              ]
            }